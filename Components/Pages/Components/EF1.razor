@inject Services.ProductService ProductService

<MudStack Row="true">
    <MudTextField @bind-Value="productName" Label="Product Name" Variant="Variant.Outlined" Margin="Margin.Dense" />
    <MudTextField @bind-Value="productClass" Label="Product Class" Variant="Variant.Outlined" Margin="Margin.Dense" />
    <MudTextField @bind-Value="productBrand" Label="Product Brand" Variant="Variant.Outlined" Margin="Margin.Dense" />
    <MudTextField @bind-Value="suplierName" Label="Suplier Name" Variant="Variant.Outlined" Margin="Margin.Dense" />
    <MudTextField @bind-Value="productCount" Label="Product Count" Variant="Variant.Outlined" Margin="Margin.Dense" />
    <MudTextField @bind-Value="productPrice" Label="Product Price" Variant="Variant.Outlined" Margin="Margin.Dense" />
</MudStack>
<MudStack Row="true">
    <MudTextField T="int" @bind-Value="inputId" Label="Id" Variant="Variant.Outlined" Margin="Margin.Dense" />
    <MudTextField @bind-Value="inputName" Label="New Name" Variant="Variant.Outlined" Margin="Margin.Dense" />
</MudStack>

<MudButton Variant="Variant.Outlined" OnClick="ShowProducts">Show Poducts</MudButton>
<MudButton Variant="Variant.Outlined" OnClick="AddProduct">Add Poduct</MudButton>
<MudButton Variant="Variant.Outlined" OnClick="@((e) => GetProduct(inputId))">Get Poduct</MudButton>
<MudButton Variant="Variant.Outlined" OnClick="GetAllProducts">Get All Poducts</MudButton>
<MudButton Variant="Variant.Outlined" OnClick="@((e) => EditProductName(inputId, inputName))">Edit Product Name</MudButton>
<MudButton Variant="Variant.Outlined" OnClick="@((e) => DeleteProduct(inputId))">Delete Poduct</MudButton>



@code {
    public string productName = string.Empty;
    public string productClass = string.Empty;
    public string productBrand = string.Empty;
    public string suplierName = string.Empty;
    public uint productCount = 0;
    public uint productPrice = 10000;

    public int inputId = 1;
    public string inputName = "DefaultName";
    public Models.Product? returnedProduct;
    public List<Models.Product>? returnedProductsList;

    public void ShowProducts()
    {
        if (returnedProductsList != null)
        {
            foreach (var product in returnedProductsList)
            {
                Console.WriteLine($"Id: {product.Id}, Product Name: {product.ProductName}, Product Price: {product.ProductPrice}");
            }
        }
        else
        {
            Console.WriteLine("No product was cached. Getting All Products ...");
            GetAllProducts();
        }
    }

    public async Task AddProduct()
    {
        var productAdd = new Models.Product()
            {
                ProductName = productName,
                ClassName = productClass,
                BrandName = productBrand,
                SuplierName = suplierName,
                ProductCount = productCount,
                ProductPrice = productPrice
            };

        await ProductService.AddProduct(productAdd);
        Console.WriteLine("Product Added");
    }

    public async Task GetProduct(int id)
    {
        returnedProduct = await ProductService.GetProductById(id);
        if (returnedProduct != null)
        {
            Console.WriteLine($"Get Product -> Id: {returnedProduct.Id}, Product Name: {returnedProduct.ProductName}, Product Price: {returnedProduct.ProductPrice}");
        }
        else
        {
            Console.WriteLine("Product not found.");
        }
    }

    public async Task GetAllProducts()
    {
        returnedProductsList = null;
        returnedProductsList = await ProductService.GetAllProducts();
        if (returnedProductsList != null)
        {
            Console.WriteLine("Got All Products");
            foreach (var product in returnedProductsList)
            {
                Console.WriteLine($"Id: {product.Id}, Product Name: {product.ProductName}, Product Price: {product.ProductPrice}");
            }
        }
        else
        {
            Console.WriteLine("No Product was found.");
        }
    }

    public async Task EditProductName(int id, string newName)
    {
        returnedProduct = await ProductService.GetProductById(id);
        if (returnedProduct != null)
        {
            returnedProduct.ProductName = newName;
            await ProductService.UpdateProduct(id, returnedProduct);
            Console.WriteLine($"Changed Product Name -> Id: {returnedProduct.Id}, New Name: {returnedProduct.ProductName}");
        }
        else
        {
            Console.WriteLine("Product not found.");
        }
    }

    public async Task DeleteProduct(int id)
    {
        var response = await ProductService.DeleteProduct(id);
        if(response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Deleted Product with Id: {id}");
        }
        else
        {
            Console.WriteLine($"NO Product found with Id: {id} to delete");
        }
    }
}
